{"mappings":"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","sources":["js/main.js"],"sourcesContent":["/*\n\tTODO\n\t-------------------------------------\n\tDeploy somewhere\n*/\n\n// import \"../shared/js/vendor/Three.js/r145/three.min.js\";\n// import \"../shared/js/vendor/Three.js/r145/examples_js/controls/OrbitControls.js\";\n// import \"../shared/js/vendor/Three.js/r145/examples_js/controls/TrackballControls.js\";\n// import \"../shared/js/vendor/Three.js/r145/examples_js/loaders/GLTFLoader.js\";\n// import \"../shared/js/vendor/Three.js/r145/examples_js/loaders/RGBELoader.js\";\n\nclass AnimatedModel\n{\n\tconstructor(model, startPos, overlayGroup)\n\t{\n\t\tlet hsv = {\n\t\t\th: lm.RandomInt(0, 255),\n\t\t\ts: lm.RandomInt(128, 255),\n\t\t\tv: lm.RandomInt(64, 255),\n\t\t\ta: 255\n\t\t};\n\t\tlet rgb = new lm.RgbColor();\n\t\trgb.FromHSVColor(hsv);\n\t\tlet rgbFloat = rgb.IntegerToFloatColor();\n\t\tthis.voronoiColor = new THREE.Color(rgbFloat.r, rgbFloat.g, rgbFloat.b);\n\n\t\tthis.model = model;\n\t\tthis.startPos = startPos;\n\t\tthis.shiftX = lm.RandomFloat(-10, 10);\n\t\tthis.shiftY = lm.RandomFloat(-10, 10);\n\t\tthis.shiftZ = lm.RandomFloat(-10, 10);\n\t\tthis.scaleX = lm.RandomFloat(0.1, 1.0);\n\t\tthis.scaleY = lm.RandomFloat(0.1, 1.0);\n\t\tthis.scaleZ = lm.RandomFloat(0.1, 1.0);\n\n\t\tthis.runningPickAnimation = false;\n\n\t\tthis.cornerDots = [];\n\t\tfor (let i = 0; i < 8; i++)\n\t\t{\n\t\t\tlet geometry = new THREE.SphereGeometry(2, 10, 10);\n\t\t\tlet material = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n\t\t\tlet sphere = new THREE.Mesh(geometry, material);\n\t\t\tsphere.position.set(lm.RandomFloat(0, 1000), lm.RandomFloat(0, 1000), 0);\n\t\t\toverlayGroup.add(sphere);\n\t\t\tthis.cornerDots.push(sphere);\n\t\t}\n\t}\n\n\tUpdateHitTargets(app)\n\t{\n\t\tlet m = this;\n\n\t\tlet width = app.canvasWidth, height = app.canvasHeight;\n\t\tlet widthHalf = width / 2, heightHalf = height / 2;\n\t\t\n\t\tconst bbox = new THREE.Box3().setFromObject(m.model, true);\n\n\t\tlet v = new THREE.Vector3();\n\n\t\tfor (let i = 0; i < 8; i++)\n\t\t{\n\t\t\t// v.setFromMatrixPosition(m.model.matrixWorld);\n\t\t\tswitch (i)\n\t\t\t{\n\t\t\t\tcase 0: v.set(bbox.min.x, bbox.min.y, bbox.min.z); break;\n\t\t\t\tcase 1: v.set(bbox.min.x, bbox.min.y, bbox.max.z); break;\n\t\t\t\tcase 2: v.set(bbox.min.x, bbox.max.y, bbox.min.z); break;\n\t\t\t\tcase 3: v.set(bbox.min.x, bbox.max.y, bbox.max.z); break;\n\t\t\t\tcase 4: v.set(bbox.max.x, bbox.min.y, bbox.min.z); break;\n\t\t\t\tcase 5: v.set(bbox.max.x, bbox.min.y, bbox.max.z); break;\n\t\t\t\tcase 6: v.set(bbox.max.x, bbox.max.y, bbox.min.z); break;\n\t\t\t\tcase 7: v.set(bbox.max.x, bbox.max.y, bbox.max.z); break;\n\t\t\t}\n\n\t\t\tv.project(app.camera);\n\t\t\t\n\t\t\tv.x = (v.x * widthHalf) + widthHalf;\n\t\t\tv.y = -(v.y * heightHalf) + heightHalf;\n\n\t\t\tthis.cornerDots[i].position.copy(v);\n\t\t}\n\t}\n\n\tPick(time)\n\t{\n\t\tif (this.runningPickAnimation)\n\t\t\treturn;\n\n\t\tthis.pickStartTime = time;\n\t\tthis.runningPickAnimation = true;\n\t\tthis.startScale = this.model.scale.clone();\n\t}\n\n\tAnimate(time, app, updateHitTargets)\n\t{\n\t\tlet m = this;\n\n\t\tm.model.rotation.x = Math.sin(time + m.shiftX);\n\t\tm.model.rotation.y = Math.sin(time + m.shiftY);\n\t\tm.model.rotation.z = Math.sin(time + m.shiftZ);\n\n\t\tm.model.position.copy(m.startPos);\n\t\tm.model.position.x += Math.sin(time * m.scaleX + m.shiftX) * 10;\n\t\tm.model.position.y += Math.sin(time * m.scaleY + m.shiftY) * 10;\n\t\tm.model.position.z += Math.sin(time * m.scaleZ + m.shiftZ) * 10;\n\n\t\tif (this.runningPickAnimation)\n\t\t{\n\t\t\tthis.model.scale.copy(this.startScale);\n\t\t\tif (time - this.pickStartTime < 2.0)\n\t\t\t{\n\t\t\t\tlet t = (time - this.pickStartTime) / 2.0;\n\t\t\t\tt *= Math.PI * 2;\n\t\t\t\tt = 1.0 + (1.0 - Math.cos(t)) * 4.0;\n\t\t\t\tthis.model.scale.multiplyScalar(t);\n\t\t\t}\n\t\t\telse\n\t\t\t\tthis.runningPickAnimation = false;\n\t\t}\n\n\t\tif (updateHitTargets)\n\t\t\tthis.UpdateHitTargets(app);\n\t}\n}\n\nclass VoronoiPicker extends lm.ThreeApp\n{\n\tconstructor()\n\t{\n\t\tsuper();\n\n\t\tthis.showSamplePts = false;\n\t\tthis.showHitRegions = false;\n\n\t\tthis.BACKGROUND_COLOR = 0x6d7492;\n\n\t\tthis.models = [];\n\n\t\t//this.cameraControlMode = \"Trackball\"; // defaults to \"Orbit\"\n\n\t\t//this.SSAO.enabled = true; // defaults to false\n\n\t\t//this.rendererOptions = { preserveDrawingBuffer: true, antialias: true, alpha: false };\n\n\t\t// Optional - specify the scene bounding box.\n\t\t// This is used for automatic things like ground plane, automatic lighting, etc.\n\t\t// If not specified, it is calculated on-demand from the contents of the scene.\n\t\t// Could be useful in an animated scene where things are moving around.\n\t\t//this.sceneBoundingBox = new THREE.Box3(new THREE.Vector3(-5, -5, -5), new THREE.Vector3(5, 5, 5));\n\t}\n\n\tLoadModel(name, count, maxDimension, range)\n\t{\n\t\t// Instantiate a loader\n\t\tconst loader = new THREE.GLTFLoader();\n\t\t\n\t\t// Optional: Provide a DRACOLoader instance to decode compressed mesh data\n\t\t// const dracoLoader = new DRACOLoader();\n\t\t// dracoLoader.setDecoderPath( '/examples/js/libs/draco/' );\n\t\t// loader.setDRACOLoader( dracoLoader );\n\t\t\n\t\t// Load a glTF resource\n\t\t// loader.setPath( 'models/' );\n\t\tloader.load(\n\t\t\t// resource URL\n\t\t\t'static/models/' + name,\n\t\t\t// called when the resource is loaded\n\t\t\tfunction ( gltf ) {\n\n\t\t\t\tlet model = gltf.scene;\n\n\t\t\t\t// remove from parent so that we can get just the bounding box of this model\n\t\t\t\tlet savedParent = model.parent;\n\t\t\t\tmodel.parent = null;\n\t\t\t\tmodel.updateMatrixWorld(true);\n\n\t\t\t\tlet offset = new THREE.Vector3();\n\t\t\t\tconst bbox = new THREE.Box3().setFromObject(model);\n\t\t\t\tbbox.getCenter(offset);\n\t\t\t\toffset.multiplyScalar(-1.0);\n\t\n\t\t\t\t// restore parent\n\t\t\t\tmodel.parent = savedParent;\n\t  \n\t\t\t\t// if (this.data.bottomAlign)\n\t\t\t\t// {\n\t\t\t\t// \toffset.y += (bbox.max.y - bbox.min.y) / 2.0;\n\t\t\t\t// }\n\n\t\t\t\tlet scale = maxDimension / (bbox.max.y - bbox.min.y);\n\t\t\t\toffset.multiplyScalar(scale);\n\t\t\t\tmodel.position.copy(offset);\n\t\t\t\tmodel.scale.setScalar(scale);\n\n\t\t\t\tfor (let i = 0; i < count; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i > 0)\n\t\t\t\t\t\tmodel = model.clone();\n\t\t\t\t\tmodel.position.copy(offset);\n\t\t\t\t\tmodel.position.x += lm.RandomFloat(-range, range);\n\t\t\t\t\tmodel.position.y += lm.RandomFloat(-range, range);\n\t\t\t\t\tmodel.position.z += lm.RandomFloat(-range, range);\n\t\t\t\t\tthis.models.push(new AnimatedModel(model, offset, this.overlayPointGroup));\n\n\t\t\t\t\t// scene.add( gltf.scene );\n\t\t\t\t\tthis.userGroup.add(model);\n\t\t\t\t}\n\t\t\n\t\t\t\tthis.AutoSetCamera();\n\t\t\t\tthis.camera.near = 0.01;\n\t\t\t\tthis.camera.far = 100.0;\n\t\t\t\tthis.camera.updateProjectionMatrix();\n\t\t\t\t// this.AddThreePointLighting();\n\t\t\n\t\t\t\tgltf.animations; // Array<THREE.AnimationClip>\n\t\t\t\tgltf.scene; // THREE.Group\n\t\t\t\tgltf.scenes; // Array<THREE.Group>\n\t\t\t\tgltf.cameras; // Array<THREE.Camera>\n\t\t\t\tgltf.asset; // Object\n\t\t\n\t\t\t}.bind(this),\n\t\t\t// called while loading is progressing\n\t\t\tfunction ( xhr ) {\n\t\t\n\t\t\t\t// console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' );\n\t\t\n\t\t\t},\n\t\t\t// called when loading has errors\n\t\t\tfunction ( error ) {\n\t\t\n\t\t\t\tconsole.log( 'An error happened' );\n\t\t\t\tconsole.log(error);\n\t\t\n\t\t\t}\n\t\t);\n\t}\n\n\tSetupScene()\n\t{\n\t\tthis.foo = true;\n\n\t\tthis.settings = QuickSettings.create(10, 10, \"Voronoi Picker\")\n\t\t.setDraggable(true)\n\t\t.setCollapsible(true)\n\t\t// .addButton(\"Export\", function(value)\n\t\t// {\n\t\t// \tthis.ExportOBJ(\"Untitled\");\n\t\t// }.bind(this))\n\t\t// .addButton(\"Save Image\", function(value)\n\t\t// {\n\t\t// \tthis.ExportPNG(\"Untitled_Image\");\n\t\t// }.bind(this))\n\t\t.addBoolean(\"Show Points\", this.showSamplePts, function(value)\n\t\t{\n\t\t\tthis.showSamplePts = value;\n\t\t\tif (this.showSamplePts)\n\t\t\t\tthis.overlayScene.add(this.overlayPointGroup);\n\t\t\telse\n\t\t\t\tthis.overlayScene.remove(this.overlayPointGroup);\n\t\t}.bind(this))\n\t\t.addBoolean(\"Show Targets\", this.showHitRegions, function(value)\n\t\t{\n\t\t\tthis.showHitRegions = value;\n\t\t\tif (this.showHitRegions)\n\t\t\t\tthis.overlayScene.add(this.overlayCellGroup);\n\t\t\telse\n\t\t\t\tthis.overlayScene.remove(this.overlayCellGroup);\n\t\t}.bind(this))\n\t\t// .addBoolean(\"SSAO Only\", this.SSAO.onlyAO, function(value)\n\t\t// {\n\t\t// \tthis.SSAO.onlyAO = value;\n\t\t// \tif (this.ssaoPass)\n\t\t// \t{\n\t\t// \t\tif (this.SSAO.onlyAO)\n\t\t// \t\t\tthis.ssaoPass.output = THREE.SSAOPass.OUTPUT.SSAO;\n\t\t// \t\telse\n\t\t// \t\t\tthis.ssaoPass.output = 0;\n\t\t// \t}\n\t\t// }.bind(this))\n\t\t// .addRange(\"Dummy Slider\", 0, 200, 50, 1, function(value)\n\t\t// {\n\t\t// }.bind(this));\n\n\t\tthis.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n\t\tthis.renderer.toneMappingExposure = 2;\n\t\tthis.renderer.outputEncoding = THREE.sRGBEncoding;\n\n\t\tnew THREE.RGBELoader()\n\t\t\t.load( 'static/textures/equirectangular/venice_sunset_1k.hdr', function ( texture )\n\t\t{\n\t\t\ttexture.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\t// this.scene.background = texture;\n\t\t\tthis.scene.environment = texture;\n\t\t}.bind(this));\n\n\t\t// this.CreateAxes();\n\t\t// this.CreateAutoGround({ color: 0xaaaaaa, scale: 2, yOffset: 0 });\n\t\t// this.AutoSetCamera();\n\t\t// this.AddThreePointLighting(true, 1.0, 30.0);\n\n\t\tthis.CreateOverlay();\n\t\tthis.overlayPointGroup = new THREE.Group();\n\t\tthis.overlayCellGroup = new THREE.Group();\n\n\t\tthis.LoadModel(\"Truck.glb\", 1, 5, 0);\n\t\tthis.LoadModel(\"Acorn.glb\", 15, 1, 20);\n\t\tthis.LoadModel(\"DamagedHelmet.gltf\", 1, 5, 20);\n\t\tthis.LoadModel(\"PineTree.glb\", 15, 1, 20);\n\t}\n\n\tOnClick(event, where)\n\t{\n\t\t// document.body.focus();\n\n\t\t// if (!this.doc || !this.doc.CurRoot())\n\t\t// \treturn;\n\n\t\t// Make hit targets visible\n\t\tlet hideDiagram = false;\n\t\tif (!this.showHitRegions)\n\t\t{\n\t\t\thideDiagram = true;\n\t\t\tthis.showHitRegions = true;\n\t\t\tthis.overlayScene.add(this.overlayCellGroup);\n\t\t\tthis.GenerateVoronoiDiagram();\n\t\t\tthis.Render(true);\n\t\t}\n\n\t\t// Use raycaster to pick a node\n\t\t//if (!this.raycaster)\n\t\t\tthis.raycaster = new THREE.Raycaster();\n\n\t\tlet mousePos = new THREE.Vector2();\n\t\t// calculate mouse position in normalized device coordinates\n\t\t// (-1 to +1) for both components\n\t\tmousePos.x = (where.x / this.canvasDiv.clientWidth) * 2 - 1;\n\t\tmousePos.y = -(where.y / this.canvasDiv.clientHeight) * 2 + 1;\n\n\t\t// update the picking ray with the camera and mouse position\n\t\tthis.raycaster.setFromCamera(mousePos, this.overlayCamera);\n\n\t\t// calculate objects intersecting the picking ray\n\t\tlet intersections = this.raycaster.intersectObject(this.overlayCellGroup, true);\n\n\t\t// Make hit targets invisible again\n\t\tif (hideDiagram)\n\t\t{\n\t\t\tthis.showHitRegions = false;\n\t\t\tthis.overlayScene.remove(this.overlayCellGroup);\n\t\t\tthis.Render(true);\n\t\t}\n\n\t\t// lm.Log(intersections);\n\t\tif (intersections.length > 0 && intersections[0].object.modelID !== undefined)\n\t\t{\n\t\t\tthis.models[intersections[0].object.modelID].Pick(this.mainTimer.ElapsedTime());\n\t\t}\n\t}\n\n\tGenerateVoronoiDiagram()\n\t{\n\t\tlet voronoi = new Voronoi();\n\n\t\tlet bbox = { xl: 0, xr: this.canvasWidth, yt: 0, yb: this.canvasHeight }; // xl is x-left, xr is x-right, yt is y-top, and yb is y-bottom\n\t\tlet sites = [];\n\t\tfor (let mID = 0; mID < this.models.length; mID++)\n\t\t{\n\t\t\tlet m = this.models[mID];\n\t\t\tfor (let i = 0; i < 8; i++)\n\t\t\t{\n\t\t\t\tlet s = {\n\t\t\t\t\tx: lm.Round(m.cornerDots[i].position.x),\n\t\t\t\t\ty: lm.Round(m.cornerDots[i].position.y),\n\t\t\t\t\tmodelID: mID\n\t\t\t\t};\n\t\t\t\tsites.push(s);\n\t\t\t}\n\t\t}\n\n\t\t// a 'vertex' is an object exhibiting 'x' and 'y' properties. The\n\t\t// Voronoi object will add a unique 'voronoiId' property to all\n\t\t// sites. The 'voronoiId' can be used as a key to lookup the associated cell\n\t\t// in diagram.cells.\n\n\t\tlet diagram = voronoi.compute(sites, bbox);\n\n\t\tif (this.showHitRegions)\n\t\t{\n\t\t\tfor (let mesh of this.overlayCellGroup.children)\n\t\t\t{\n\t\t\t\tmesh.geometry.dispose();\n\t\t\t\tmesh.material.dispose();\n\t\t\t}\n\t\t\tthis.overlayCellGroup.clear();\n\n\t\t\tfor (let c of diagram.cells)\n\t\t\t{\n\t\t\t\tif (!c.halfedges || c.halfedges.length == 0)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tlet startPt = c.halfedges[0].getStartpoint();\n\t\t\t\tlet shape = new THREE.Shape();\n\t\t\t\tshape.moveTo(startPt.x, startPt.y);\n\t\t\t\tfor (let i = 0; i < c.halfedges.length; i++)\n\t\t\t\t{\n\t\t\t\t\tlet endPt = c.halfedges[i].getEndpoint();\n\t\t\t\t\tshape.lineTo(endPt.x, endPt.y);\n\t\t\t\t}\n\n\t\t\t\tconst geometry = new THREE.ShapeGeometry( shape );\n\t\t\t\tlet color = this.models[c.site.modelID].voronoiColor;\n\t\t\t\tconst material = new THREE.MeshBasicMaterial( { color: color, side: THREE.DoubleSide, opacity: 0.25, transparent: true } );\n\t\t\t\tconst mesh = new THREE.Mesh( geometry, material ) ;\n\t\t\t\tmesh.modelID = c.site.modelID;\n\t\t\t\tthis.overlayCellGroup.add( mesh );\n\t\t\t}\n\t\t}\n\t}\n\n\tUpdateScene()\n\t{\n\t\tlet updateHitTargets = this.showSamplePts || this.showHitRegions;\n\n\t\tlet t = this.mainTimer.ElapsedTime();\n\t\tfor (let m of this.models)\n\t\t{\n\t\t\tm.Animate(t, this, updateHitTargets);\n\t\t}\n\n\t\tif (this.showHitRegions)\n\t\t{\n\t\t\tthis.GenerateVoronoiDiagram();\n\t\t}\n\t}\n}\n\nlet vApp = null;\n\nlm.AddLoadEvent(function()\n{\n\tlm.DEBUG = false;\n\tvApp = new VoronoiPicker();\n\tvApp.SetupThreeJS();\n\n\tvApp.SetupScene();\n\n//lm.Log(\"Regular log - goes to the browser console, or custom console if visible.\");\n//lm.ErrorLog(\"Error log - brings up the custom console if necessary.\");\n//lm.DebugLog(\"Only in Debug mode - brings up the custom console if necessary.\");\n//lm.VerboseLog(\"Always appears - brings up the custom console if necessary.\");\n});\n"],"names":["$77ac944da51b7354$var$AnimatedModel","constructor","model","startPos","overlayGroup","hsv","h","lm","RandomInt","s","v","a","rgb","RgbColor","FromHSVColor","rgbFloat","IntegerToFloatColor","this","voronoiColor","THREE","Color","r","g","b","shiftX","RandomFloat","shiftY","shiftZ","scaleX","scaleY","scaleZ","runningPickAnimation","cornerDots","i","geometry","SphereGeometry","material","MeshBasicMaterial","color","sphere","Mesh","position","set","add","push","UpdateHitTargets","app","widthHalf","canvasWidth","heightHalf","canvasHeight","bbox","Box3","setFromObject","Vector3","min","x","y","z","max","project","camera","copy","Pick","time","pickStartTime","startScale","scale","clone","Animate","updateHitTargets","m","rotation","Math","sin","t","PI","cos","multiplyScalar","$77ac944da51b7354$var$VoronoiPicker","ThreeApp","super","showSamplePts","showHitRegions","BACKGROUND_COLOR","models","LoadModel","name","count","maxDimension","range","GLTFLoader","load","gltf","scene","savedParent","parent","updateMatrixWorld","offset","getCenter","setScalar","overlayPointGroup","userGroup","AutoSetCamera","near","far","updateProjectionMatrix","animations","scenes","cameras","asset","bind","xhr","error","console","log","SetupScene","foo","settings","QuickSettings","create","setDraggable","setCollapsible","addBoolean","value","overlayScene","remove","overlayCellGroup","renderer","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","RGBELoader","texture","mapping","EquirectangularReflectionMapping","environment","CreateOverlay","Group","OnClick","event","where","hideDiagram","GenerateVoronoiDiagram","Render","raycaster","Raycaster","mousePos","Vector2","canvasDiv","clientWidth","clientHeight","setFromCamera","overlayCamera","intersections","intersectObject","length","undefined","object","modelID","mainTimer","ElapsedTime","voronoi","Voronoi","xl","xr","yt","yb","sites","mID","Round","diagram","compute","mesh","children","dispose","clear","c","cells","halfedges","startPt","getStartpoint","shape","Shape","moveTo","i1","endPt","getEndpoint","lineTo","ShapeGeometry","site","side","DoubleSide","opacity","transparent","mesh1","UpdateScene","$77ac944da51b7354$var$vApp","AddLoadEvent","DEBUG","SetupThreeJS"],"version":3,"file":"index.b1ede438.js.map"}