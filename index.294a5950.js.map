{"mappings":"AAwcCA,MAAMC,aA1bN,MAECC,YAAaC,EAAIC,MAEhBC,KAAKC,MAAQ,CAAC,CAAE,EAAG,EAAG,GAAK,EAAE,EAAK,EAAG,GAAK,CAAE,GAAG,EAAK,GAAK,EAAE,GAAK,EAAK,GAAK,CAAE,EAAG,EAAG,GAAK,EAAE,EAAK,EAAG,GAAK,CAAE,EAAG,GAAG,GAAO,EAAE,EAAK,GAAG,GAAO,CAAE,EAAG,EAAG,GAAK,CAAE,GAAG,EAAK,GAAK,CAAE,EAAG,GAAG,GAAO,CAAE,GAAG,GAAK,IAC3LD,KAAKE,MAAQ,CAAC,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,EAAG,GAAG,GAAO,CAAE,EAAG,GAAG,EAAK,GAAK,CAAE,EAAG,GAAG,GAAK,GAAO,CAAE,GAAG,EAAK,EAAG,GAAK,CAAE,GAAG,EAAK,GAAG,GAAO,CAAE,GAAG,GAAK,EAAK,GAAK,CAAE,GAAG,GAAK,GAAK,GAAO,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,EAAG,GAAG,GAAO,CAAE,EAAG,GAAG,EAAK,GAAK,CAAE,EAAG,GAAG,GAAK,GAAO,EAAE,EAAK,EAAG,EAAG,GAAK,EAAE,EAAK,EAAG,GAAG,GAAO,EAAE,EAAK,GAAG,EAAK,GAAK,EAAE,EAAK,GAAG,GAAK,GAAO,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,EAAG,GAAG,GAAO,CAAE,GAAG,EAAK,EAAG,GAAK,CAAE,GAAG,EAAK,GAAG,GAAO,EAAE,EAAK,EAAG,EAAG,GAAK,EAAE,EAAK,EAAG,GAAG,GAAO,EAAE,GAAK,EAAK,EAAG,GAAK,EAAE,GAAK,EAAK,GAAG,GAAO,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,GAAG,EAAK,GAAK,CAAE,GAAG,EAAK,EAAG,GAAK,CAAE,GAAG,GAAK,EAAK,GAAK,EAAE,EAAK,EAAG,EAAG,GAAK,EAAE,EAAK,GAAG,EAAK,GAAK,EAAE,GAAK,EAAK,EAAG,GAAK,EAAE,GAAK,GAAK,EAAK,IACzmBF,KAAKG,EAAI,GAET,IAAM,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAEzBJ,KAAKG,EAAGC,GAAML,KAAKM,MAAoB,IAAbP,EAAEQ,UAK7BN,KAAKO,KAAO,GAEZ,IAAM,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAEzgCC,IAAKC,EAAGC,EAAGC,GAEV,OAAOF,EAAG,GAAMC,EAAID,EAAG,GAAME,C,CAI9BC,KAAMH,EAAGC,EAAGC,EAAGE,GAEd,OAAOJ,EAAG,GAAMC,EAAID,EAAG,GAAME,EAAIF,EAAG,GAAMI,C,CAI3CC,KAAML,EAAGC,EAAGC,EAAGE,EAAGE,GAEjB,OAAON,EAAG,GAAMC,EAAID,EAAG,GAAME,EAAIF,EAAG,GAAMI,EAAIJ,EAAG,GAAMM,C,CAIxDC,MAAOC,EAAKC,GAEX,IAAIC,EAEAC,EACAC,EAEJ,MACMC,GAAML,EAAMC,IADP,IAAQrB,KAAK0B,KAAM,GAAQ,IAGhCrB,EAAIL,KAAKM,MAAOc,EAAMK,GACtBE,EAAI3B,KAAKM,MAAOe,EAAMI,GACtBG,GAAO,EAAM5B,KAAK0B,KAAM,IAAU,EAClCG,GAAMxB,EAAIsB,GAAMC,EAIhBE,EAAKV,GAHAf,EAAIwB,GAKTE,EAAKV,GAHAM,EAAIE,GAMf,IAAIpB,EAEAuB,EAECF,EAAKC,GAETtB,EAAK,EACLuB,EAAK,IAILvB,EAAK,EACLuB,EAAK,GAQN,MAAMC,EAAKH,EAAKrB,EAAKmB,EAEfM,EAAKH,EAAKC,EAAKJ,EACfO,EAAKL,EAAK,EAAM,EAAMF,EAEtBQ,EAAKL,EAAK,EAAM,EAAMH,EAEtBS,EAAS,IAAJhC,EACLiC,EAAS,IAAJX,EACLY,EAAMtC,KAAKO,KAAM6B,EAAKpC,KAAKO,KAAM8B,IAAS,GAC1CE,EAAMvC,KAAKO,KAAM6B,EAAK5B,EAAKR,KAAKO,KAAM8B,EAAKN,IAAS,GACpDS,EAAMxC,KAAKO,KAAM6B,EAAK,EAAIpC,KAAKO,KAAM8B,EAAK,IAAQ,GAExD,IAAII,EAAK,GAAMZ,EAAKA,EAAKC,EAAKA,EACzBW,EAAK,EAAIpB,EAAK,GAElBoB,GAAMA,EACNpB,EAAKoB,EAAKA,EAAKzC,KAAKU,IAAKV,KAAKC,MAAOqC,GAAOT,EAAIC,IAIjD,IAAIY,EAAK,GAAMV,EAAKA,EAAKC,EAAKA,EACzBS,EAAK,EAAIpB,EAAK,GAElBoB,GAAMA,EACNpB,EAAKoB,EAAKA,EAAK1C,KAAKU,IAAKV,KAAKC,MAAOsC,GAAOP,EAAIC,IAIjD,IAAIU,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAS9B,OARKQ,EAAK,EAAIpB,EAAK,GAElBoB,GAAMA,EACNpB,EAAKoB,EAAKA,EAAK3C,KAAKU,IAAKV,KAAKC,MAAOuC,GAAON,EAAIC,IAK1C,IAASd,EAAKC,EAAKC,E,CAK3BqB,QAASzB,EAAKC,EAAKyB,GAElB,IAAIxB,EAEAC,EACAC,EACAuB,EAEJ,MACMtB,GAAML,EAAMC,EAAMyB,IADb,EAAM,GAGXzC,EAAIL,KAAKM,MAAOc,EAAMK,GACtBE,EAAI3B,KAAKM,MAAOe,EAAMI,GACtBuB,EAAIhD,KAAKM,MAAOwC,EAAMrB,GACtBwB,EAAK,EAAM,EAEXpB,GAAMxB,EAAIsB,EAAIqB,GAAMC,EAKpBnB,EAAKV,GAJAf,EAAIwB,GAMTE,EAAKV,GAJAM,EAAIE,GAKTqB,EAAKJ,GAJAE,EAAInB,GAOf,IAAIpB,EAEAuB,EACAmB,EACAC,EAEAC,EACAC,EAECxB,GAAMC,EAELA,GAAMmB,GAEVzC,EAAK,EACLuB,EAAK,EACLmB,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,GAEMxB,GAAMoB,GAEjBzC,EAAK,EACLuB,EAAK,EACLmB,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,IAIL7C,EAAK,EACLuB,EAAK,EACLmB,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,GAODvB,EAAKmB,GAETzC,EAAK,EACLuB,EAAK,EACLmB,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,GAEMxB,EAAKoB,GAEhBzC,EAAK,EACLuB,EAAK,EACLmB,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,IAIL7C,EAAK,EACLuB,EAAK,EACLmB,EAAK,EACLC,EAAK,EACLC,EAAK,EACLC,EAAK,GAUP,MAAMrB,EAAKH,EAAKrB,EAAKwC,EAEff,EAAKH,EAAKC,EAAKiB,EACfM,EAAKL,EAAKC,EAAKF,EACfd,EAAKL,EAAKsB,EAAK,EAAMH,EAErBb,EAAKL,EAAKsB,EAAK,EAAMJ,EACrBO,EAAKN,EAAKI,EAAK,EAAML,EACrBQ,EAAK3B,EAAK,EAAM,GAEhB4B,EAAK3B,EAAK,EAAM,GAChB4B,EAAKT,EAAK,EAAM,GAEhBb,EAAS,IAAJhC,EACLiC,EAAS,IAAJX,EACLiC,EAAS,IAAJZ,EACLT,EAAMtC,KAAKO,KAAM6B,EAAKpC,KAAKO,KAAM8B,EAAKrC,KAAKO,KAAMoD,KAAW,GAC5DpB,EAAMvC,KAAKO,KAAM6B,EAAK5B,EAAKR,KAAKO,KAAM8B,EAAKN,EAAK/B,KAAKO,KAAMoD,EAAKT,KAAW,GAC3EV,EAAMxC,KAAKO,KAAM6B,EAAKe,EAAKnD,KAAKO,KAAM8B,EAAKe,EAAKpD,KAAKO,KAAMoD,EAAKN,KAAW,GAC3EO,EAAM5D,KAAKO,KAAM6B,EAAK,EAAIpC,KAAKO,KAAM8B,EAAK,EAAIrC,KAAKO,KAAMoD,EAAK,KAAU,GAE9E,IAAIlB,EAAK,GAAMZ,EAAKA,EAAKC,EAAKA,EAAKmB,EAAKA,EACnCR,EAAK,EAAIpB,EAAK,GAElBoB,GAAMA,EACNpB,EAAKoB,EAAKA,EAAKzC,KAAKc,KAAMd,KAAKC,MAAOqC,GAAOT,EAAIC,EAAImB,IAItD,IAAIP,EAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAAKqB,EAAKA,EACnCZ,EAAK,EAAIpB,EAAK,GAElBoB,GAAMA,EACNpB,EAAKoB,EAAKA,EAAK1C,KAAKc,KAAMd,KAAKC,MAAOsC,GAAOP,EAAIC,EAAIqB,IAItD,IAAIX,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAAKoB,EAAKA,EACnCZ,EAAK,EAAIpB,EAAK,GAElBoB,GAAMA,EACNpB,EAAKoB,EAAKA,EAAK3C,KAAKc,KAAMd,KAAKC,MAAOuC,GAAON,EAAIC,EAAIoB,IAItD,IAAIM,EAAK,GAAML,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EASxC,OARKG,EAAK,EAAIf,EAAK,GAElBe,GAAMA,EACNf,EAAKe,EAAKA,EAAK7D,KAAKc,KAAMd,KAAKC,MAAO2D,GAAOJ,EAAIC,EAAIC,IAK/C,IAASrC,EAAKC,EAAKC,EAAKuB,E,CAKhCgB,QAASlD,EAAGC,EAAGE,EAAGE,GAGjB,MAAMf,EAAQF,KAAKE,MACbO,EAAUT,KAAKS,QACfF,EAAOP,KAAKO,KAEZwD,GAAOhE,KAAK0B,KAAM,GAAQ,GAAQ,EAClCuC,GAAO,EAAMjE,KAAK0B,KAAM,IAAU,GACxC,IAAIJ,EAEAC,EACAC,EACAuB,EACAmB,EAEJ,MAAMzC,GAAMZ,EAAIC,EAAIE,EAAIE,GAAM8C,EAExB3D,EAAIL,KAAKM,MAAOO,EAAIY,GACpBE,EAAI3B,KAAKM,MAAOQ,EAAIW,GACpBuB,EAAIhD,KAAKM,MAAOU,EAAIS,GACpB0C,EAAInE,KAAKM,MAAOY,EAAIO,GACpBI,GAAMxB,EAAIsB,EAAIqB,EAAImB,GAAMF,EAOxBnC,EAAKjB,GALAR,EAAIwB,GAOTE,EAAKjB,GALAa,EAAIE,GAMTqB,EAAKlC,GALAgC,EAAInB,GAMTuC,EAAKlD,GALAiD,EAAItC,GAoBTwC,GANKvC,EAAKC,EAAK,GAAK,IACfD,EAAKoB,EAAK,GAAK,IACfnB,EAAKmB,EAAK,EAAI,IACdpB,EAAKsC,EAAK,EAAI,IACdrC,EAAKqC,EAAK,EAAI,IACdlB,EAAKkB,EAAK,EAAI,GAOnB3D,EAAKC,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAClCrC,EAAKtB,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAClClB,EAAKzC,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAClCC,EAAK5D,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAElCjB,EAAK1C,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAClChB,EAAK3C,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAClCf,EAAK5C,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAClCE,EAAK7D,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAElCG,EAAK9D,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAClCI,EAAK/D,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAClCK,EAAKhE,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAClCM,EAAKjE,EAAS2D,GAAK,IAAO,EAAI,EAAI,EAElCpC,EAAKH,EAAKrB,EAAKwD,EAEf/B,EAAKH,EAAKC,EAAKiC,EACfV,EAAKL,EAAKC,EAAKc,EACfW,EAAKR,EAAKE,EAAKL,EACf9B,EAAKL,EAAKsB,EAAK,EAAMa,EAErB7B,EAAKL,EAAKsB,EAAK,EAAMY,EACrBT,EAAKN,EAAKI,EAAK,EAAMW,EACrBY,EAAKT,EAAKG,EAAK,EAAMN,EACrBR,EAAK3B,EAAK0C,EAAK,EAAMP,EAErBP,EAAK3B,EAAK0C,EAAK,EAAMR,EACrBN,EAAKT,EAAKwB,EAAK,EAAMT,EACrBa,EAAKV,EAAKO,EAAK,EAAMV,EACrBc,EAAKjD,EAAK,EAAM,EAAMmC,EAEtBe,EAAKjD,EAAK,EAAM,EAAMkC,EACtBgB,EAAK/B,EAAK,EAAM,EAAMe,EACtBiB,EAAKd,EAAK,EAAM,EAAMH,EAEtB5B,EAAS,IAAJhC,EACLiC,GAAS,IAAJX,EACLiC,GAAS,IAAJZ,EACLmC,GAAS,IAAJhB,EACL5B,GAAM/B,EAAM6B,EAAK7B,EAAM8B,GAAK9B,EAAMoD,GAAKpD,EAAM2E,OAAa,GAC1D3C,GAAMhC,EAAM6B,EAAK5B,EAAKD,EAAM8B,GAAKN,EAAKxB,EAAMoD,GAAKT,EAAK3C,EAAM2E,GAAKb,MAAa,GAC9E7B,GAAMjC,EAAM6B,EAAKe,EAAK5C,EAAM8B,GAAKe,EAAK7C,EAAMoD,GAAKN,EAAK9C,EAAM2E,GAAKZ,MAAa,GAC9EV,GAAMrD,EAAM6B,EAAKmC,EAAKhE,EAAM8B,GAAKmC,EAAKjE,EAAMoD,GAAKc,EAAKlE,EAAM2E,GAAKR,MAAa,GAC9ES,GAAM5E,EAAM6B,EAAK,EAAI7B,EAAM8B,GAAK,EAAI9B,EAAMoD,GAAK,EAAIpD,EAAM2E,GAAK,MAAY,GAEhF,IAAIzC,GAAK,GAAMZ,EAAKA,EAAKC,EAAKA,EAAKmB,EAAKA,EAAKkB,EAAKA,EAC7C1B,GAAK,EAAIpB,EAAK,GAElBoB,IAAMA,GACNpB,EAAKoB,GAAKA,GAAKzC,KAAKgB,KAAMd,EAAOoC,IAAOT,EAAIC,EAAImB,EAAIkB,IAIrD,IAAIzB,GAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAAKqB,EAAKA,EAAKqB,EAAKA,EAC7CjC,GAAK,EAAIpB,EAAK,GAElBoB,IAAMA,GACNpB,EAAKoB,GAAKA,GAAK1C,KAAKgB,KAAMd,EAAOqC,IAAOP,EAAIC,EAAIqB,EAAIqB,IAIrD,IAAIhC,GAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAAKoB,EAAKA,EAAKqB,EAAKA,EAC7CjC,GAAK,EAAIpB,EAAK,GAElBoB,IAAMA,GACNpB,EAAKoB,GAAKA,GAAK3C,KAAKgB,KAAMd,EAAOsC,IAAON,EAAIC,EAAIoB,EAAIqB,IAIrD,IAAIf,GAAK,GAAML,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKmB,EAAKA,EAC7ChB,GAAK,EAAIf,EAAK,GAElBe,IAAMA,GACNf,EAAKe,GAAKA,GAAK7D,KAAKgB,KAAMd,EAAO0D,IAAOJ,EAAIC,EAAIC,EAAImB,IAIrD,IAAIO,GAAK,GAAMN,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAQlD,OAPKG,GAAK,EAAInB,EAAK,GAElBmB,IAAMA,GACNnB,EAAKmB,GAAKA,GAAKpF,KAAKgB,KAAMd,EAAOiF,IAAOL,EAAIC,EAAIC,EAAIC,IAI9C,IAAS5D,EAAKC,EAAKC,EAAKuB,EAAKmB,E","sources":["../js/vendor/Three.js/r145/examples_js/math/SimplexNoise.js"],"sourcesContent":["( function () {\n\n\t// Ported from Stefan Gustavson's java implementation\n\t// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n\t// Read Stefan's excellent paper for details on how this code works.\n\t//\n\t// Sean McCullough banksean@gmail.com\n\t//\n\t// Added 4D noise\n\n\t/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\n\tclass SimplexNoise {\n\n\t\tconstructor( r = Math ) {\n\n\t\t\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ], [ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ], [ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\t\t\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ], [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ], [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ], [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ], [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ], [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ], [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ], [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\t\t\tthis.p = [];\n\n\t\t\tfor ( let i = 0; i < 256; i ++ ) {\n\n\t\t\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t\t\t} // To remove the need for index wrapping, double the permutation table length\n\n\n\t\t\tthis.perm = [];\n\n\t\t\tfor ( let i = 0; i < 512; i ++ ) {\n\n\t\t\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t\t\t} // A lookup table to traverse the simplex around a given point in 4D.\n\t\t\t// Details can be found where this table is used, in the 4D noise method.\n\n\n\t\t\tthis.simplex = [[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ], [ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ], [ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ], [ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n\t\t}\n\n\t\tdot( g, x, y ) {\n\n\t\t\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n\t\t}\n\n\t\tdot3( g, x, y, z ) {\n\n\t\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n\t\t}\n\n\t\tdot4( g, x, y, z, w ) {\n\n\t\t\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n\t\t}\n\n\t\tnoise( xin, yin ) {\n\n\t\t\tlet n0; // Noise contributions from the three corners\n\n\t\t\tlet n1;\n\t\t\tlet n2; // Skew the input space to determine which simplex cell we're in\n\n\t\t\tconst F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\t\t\tconst s = ( xin + yin ) * F2; // Hairy factor for 2D\n\n\t\t\tconst i = Math.floor( xin + s );\n\t\t\tconst j = Math.floor( yin + s );\n\t\t\tconst G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\t\t\tconst t = ( i + j ) * G2;\n\t\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n\t\t\tconst Y0 = j - t;\n\t\t\tconst x0 = xin - X0; // The x,y distances from the cell origin\n\n\t\t\tconst y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n\t\t\t// Determine which simplex we are in.\n\n\t\t\tlet i1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n\t\t\tlet j1;\n\n\t\t\tif ( x0 > y0 ) {\n\n\t\t\t\ti1 = 1;\n\t\t\t\tj1 = 0; // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t\t\t} else {\n\n\t\t\t\ti1 = 0;\n\t\t\t\tj1 = 1;\n\n\t\t\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\t\t\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t\t\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t\t\t// c = (3-sqrt(3))/6\n\n\n\t\t\tconst x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n\t\t\tconst y1 = y0 - j1 + G2;\n\t\t\tconst x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n\t\t\tconst y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n\t\t\tconst ii = i & 255;\n\t\t\tconst jj = j & 255;\n\t\t\tconst gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\t\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\t\t\tconst gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12; // Calculate the contribution from the three corners\n\n\t\t\tlet t0 = 0.5 - x0 * x0 - y0 * y0;\n\t\t\tif ( t0 < 0 ) n0 = 0.0; else {\n\n\t\t\t\tt0 *= t0;\n\t\t\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t\t\t}\n\n\t\t\tlet t1 = 0.5 - x1 * x1 - y1 * y1;\n\t\t\tif ( t1 < 0 ) n1 = 0.0; else {\n\n\t\t\t\tt1 *= t1;\n\t\t\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t\t\t}\n\n\t\t\tlet t2 = 0.5 - x2 * x2 - y2 * y2;\n\t\t\tif ( t2 < 0 ) n2 = 0.0; else {\n\n\t\t\t\tt2 *= t2;\n\t\t\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t\t\t} // Add contributions from each corner to get the final noise value.\n\t\t\t// The result is scaled to return values in the interval [-1,1].\n\n\t\t\treturn 70.0 * ( n0 + n1 + n2 );\n\n\t\t} // 3D simplex noise\n\n\n\t\tnoise3d( xin, yin, zin ) {\n\n\t\t\tlet n0; // Noise contributions from the four corners\n\n\t\t\tlet n1;\n\t\t\tlet n2;\n\t\t\tlet n3; // Skew the input space to determine which simplex cell we're in\n\n\t\t\tconst F3 = 1.0 / 3.0;\n\t\t\tconst s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\n\t\t\tconst i = Math.floor( xin + s );\n\t\t\tconst j = Math.floor( yin + s );\n\t\t\tconst k = Math.floor( zin + s );\n\t\t\tconst G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n\t\t\tconst t = ( i + j + k ) * G3;\n\t\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n\t\t\tconst Y0 = j - t;\n\t\t\tconst Z0 = k - t;\n\t\t\tconst x0 = xin - X0; // The x,y,z distances from the cell origin\n\n\t\t\tconst y0 = yin - Y0;\n\t\t\tconst z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t\t\t// Determine which simplex we are in.\n\n\t\t\tlet i1; // Offsets for second corner of simplex in (i,j,k) coords\n\n\t\t\tlet j1;\n\t\t\tlet k1;\n\t\t\tlet i2; // Offsets for third corner of simplex in (i,j,k) coords\n\n\t\t\tlet j2;\n\t\t\tlet k2;\n\n\t\t\tif ( x0 >= y0 ) {\n\n\t\t\t\tif ( y0 >= z0 ) {\n\n\t\t\t\t\ti1 = 1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t\tk1 = 0;\n\t\t\t\t\ti2 = 1;\n\t\t\t\t\tj2 = 1;\n\t\t\t\t\tk2 = 0; // X Y Z order\n\n\t\t\t\t} else if ( x0 >= z0 ) {\n\n\t\t\t\t\ti1 = 1;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t\tk1 = 0;\n\t\t\t\t\ti2 = 1;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t\tk2 = 1; // X Z Y order\n\n\t\t\t\t} else {\n\n\t\t\t\t\ti1 = 0;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t\tk1 = 1;\n\t\t\t\t\ti2 = 1;\n\t\t\t\t\tj2 = 0;\n\t\t\t\t\tk2 = 1;\n\n\t\t\t\t} // Z X Y order\n\n\t\t\t} else {\n\n\t\t\t\t// x0<y0\n\t\t\t\tif ( y0 < z0 ) {\n\n\t\t\t\t\ti1 = 0;\n\t\t\t\t\tj1 = 0;\n\t\t\t\t\tk1 = 1;\n\t\t\t\t\ti2 = 0;\n\t\t\t\t\tj2 = 1;\n\t\t\t\t\tk2 = 1; // Z Y X order\n\n\t\t\t\t} else if ( x0 < z0 ) {\n\n\t\t\t\t\ti1 = 0;\n\t\t\t\t\tj1 = 1;\n\t\t\t\t\tk1 = 0;\n\t\t\t\t\ti2 = 0;\n\t\t\t\t\tj2 = 1;\n\t\t\t\t\tk2 = 1; // Y Z X order\n\n\t\t\t\t} else {\n\n\t\t\t\t\ti1 = 0;\n\t\t\t\t\tj1 = 1;\n\t\t\t\t\tk1 = 0;\n\t\t\t\t\ti2 = 1;\n\t\t\t\t\tj2 = 1;\n\t\t\t\t\tk2 = 0;\n\n\t\t\t\t} // Y X Z order\n\n\t\t\t} // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t\t\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t\t\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t\t\t// c = 1/6.\n\n\n\t\t\tconst x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n\t\t\tconst y1 = y0 - j1 + G3;\n\t\t\tconst z1 = z0 - k1 + G3;\n\t\t\tconst x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n\t\t\tconst y2 = y0 - j2 + 2.0 * G3;\n\t\t\tconst z2 = z0 - k2 + 2.0 * G3;\n\t\t\tconst x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n\t\t\tconst y3 = y0 - 1.0 + 3.0 * G3;\n\t\t\tconst z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n\t\t\tconst ii = i & 255;\n\t\t\tconst jj = j & 255;\n\t\t\tconst kk = k & 255;\n\t\t\tconst gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\t\t\tconst gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\t\t\tconst gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\t\t\tconst gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12; // Calculate the contribution from the four corners\n\n\t\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\t\t\tif ( t0 < 0 ) n0 = 0.0; else {\n\n\t\t\t\tt0 *= t0;\n\t\t\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t\t\t}\n\n\t\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\t\t\tif ( t1 < 0 ) n1 = 0.0; else {\n\n\t\t\t\tt1 *= t1;\n\t\t\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t\t\t}\n\n\t\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\t\t\tif ( t2 < 0 ) n2 = 0.0; else {\n\n\t\t\t\tt2 *= t2;\n\t\t\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t\t\t}\n\n\t\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\t\t\tif ( t3 < 0 ) n3 = 0.0; else {\n\n\t\t\t\tt3 *= t3;\n\t\t\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t\t\t} // Add contributions from each corner to get the final noise value.\n\t\t\t// The result is scaled to stay just inside [-1,1]\n\n\t\t\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n\t\t} // 4D simplex noise\n\n\n\t\tnoise4d( x, y, z, w ) {\n\n\t\t\t// For faster and easier lookups\n\t\t\tconst grad4 = this.grad4;\n\t\t\tconst simplex = this.simplex;\n\t\t\tconst perm = this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n\t\t\tconst F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\t\t\tconst G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\t\t\tlet n0; // Noise contributions from the five corners\n\n\t\t\tlet n1;\n\t\t\tlet n2;\n\t\t\tlet n3;\n\t\t\tlet n4; // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n\t\t\tconst s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\n\t\t\tconst i = Math.floor( x + s );\n\t\t\tconst j = Math.floor( y + s );\n\t\t\tconst k = Math.floor( z + s );\n\t\t\tconst l = Math.floor( w + s );\n\t\t\tconst t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\n\t\t\tconst X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n\t\t\tconst Y0 = j - t;\n\t\t\tconst Z0 = k - t;\n\t\t\tconst W0 = l - t;\n\t\t\tconst x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n\t\t\tconst y0 = y - Y0;\n\t\t\tconst z0 = z - Z0;\n\t\t\tconst w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t\t\t// To find out which of the 24 possible simplices we're in, we need to\n\t\t\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t\t\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t\t\t// then find the correct traversal order for the simplex we’re in.\n\t\t\t// First, six pair-wise comparisons are performed between each possible pair\n\t\t\t// of the four coordinates, and the results are used to add up binary bits\n\t\t\t// for an integer index.\n\n\t\t\tconst c1 = x0 > y0 ? 32 : 0;\n\t\t\tconst c2 = x0 > z0 ? 16 : 0;\n\t\t\tconst c3 = y0 > z0 ? 8 : 0;\n\t\t\tconst c4 = x0 > w0 ? 4 : 0;\n\t\t\tconst c5 = y0 > w0 ? 2 : 0;\n\t\t\tconst c6 = z0 > w0 ? 1 : 0;\n\t\t\tconst c = c1 + c2 + c3 + c4 + c5 + c6; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t\t\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t\t\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t\t\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t\t\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n\t\t\tconst i1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\t\t\tconst j1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\t\t\tconst k1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\t\t\tconst l1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n\t\t\tconst i2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\t\t\tconst j2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0;\n\t\t\tconst k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\t\t\tconst l2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n\t\t\tconst i3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\t\t\tconst j3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\t\t\tconst k3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\t\t\tconst l3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n\t\t\tconst x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n\t\t\tconst y1 = y0 - j1 + G4;\n\t\t\tconst z1 = z0 - k1 + G4;\n\t\t\tconst w1 = w0 - l1 + G4;\n\t\t\tconst x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n\t\t\tconst y2 = y0 - j2 + 2.0 * G4;\n\t\t\tconst z2 = z0 - k2 + 2.0 * G4;\n\t\t\tconst w2 = w0 - l2 + 2.0 * G4;\n\t\t\tconst x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n\t\t\tconst y3 = y0 - j3 + 3.0 * G4;\n\t\t\tconst z3 = z0 - k3 + 3.0 * G4;\n\t\t\tconst w3 = w0 - l3 + 3.0 * G4;\n\t\t\tconst x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n\t\t\tconst y4 = y0 - 1.0 + 4.0 * G4;\n\t\t\tconst z4 = z0 - 1.0 + 4.0 * G4;\n\t\t\tconst w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n\t\t\tconst ii = i & 255;\n\t\t\tconst jj = j & 255;\n\t\t\tconst kk = k & 255;\n\t\t\tconst ll = l & 255;\n\t\t\tconst gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\t\t\tconst gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\t\t\tconst gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\t\t\tconst gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\t\t\tconst gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32; // Calculate the contribution from the five corners\n\n\t\t\tlet t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\t\t\tif ( t0 < 0 ) n0 = 0.0; else {\n\n\t\t\t\tt0 *= t0;\n\t\t\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t\t\t}\n\n\t\t\tlet t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\t\t\tif ( t1 < 0 ) n1 = 0.0; else {\n\n\t\t\t\tt1 *= t1;\n\t\t\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t\t\t}\n\n\t\t\tlet t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\t\t\tif ( t2 < 0 ) n2 = 0.0; else {\n\n\t\t\t\tt2 *= t2;\n\t\t\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t\t\t}\n\n\t\t\tlet t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\t\t\tif ( t3 < 0 ) n3 = 0.0; else {\n\n\t\t\t\tt3 *= t3;\n\t\t\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t\t\t}\n\n\t\t\tlet t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\t\t\tif ( t4 < 0 ) n4 = 0.0; else {\n\n\t\t\t\tt4 *= t4;\n\t\t\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t\t\t} // Sum up and scale the result to cover the range [-1,1]\n\n\t\t\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n\t\t}\n\n\t}\n\n\tTHREE.SimplexNoise = SimplexNoise;\n\n} )();\n"],"names":["THREE","SimplexNoise","constructor","r","Math","this","grad3","grad4","p","i","floor","random","perm","i1","simplex","dot","g","x","y","dot3","z","dot4","w","noise","xin","yin","n0","n1","n2","s","sqrt","j","G2","t","x0","y0","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","noise3d","zin","n3","k","G3","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","F4","G4","n4","l","w0","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4"],"version":3,"file":"index.294a5950.js.map"}