{"mappings":"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","sources":["../js/vendor/Three.js/r145/examples_js/loaders/RGBELoader.js"],"sourcesContent":["( function () {\n\n\t// http://en.wikipedia.org/wiki/RGBE_image_format\n\n\tclass RGBELoader extends THREE.DataTextureLoader {\n\n\t\tconstructor( manager ) {\n\n\t\t\tsuper( manager );\n\t\t\tthis.type = THREE.HalfFloatType;\n\n\t\t} // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n\t\tparse( buffer ) {\n\n\t\t\tconst\n\t\t\t\t/* return codes for rgbe routines */\n\t\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t\t/* default error routine.  change this to change error handling */\n\t\t\t\trgbe_read_error = 1,\n\t\t\t\trgbe_write_error = 2,\n\t\t\t\trgbe_format_error = 3,\n\t\t\t\trgbe_memory_error = 4,\n\t\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\t\tcase rgbe_read_error:\n\t\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader Read Error: ' + ( msg || '' ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase rgbe_write_error:\n\t\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader Write Error: ' + ( msg || '' ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase rgbe_format_error:\n\t\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\tcase rgbe_memory_error:\n\t\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: Error: ' + ( msg || '' ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t\t},\n\n\t\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\t\t\t\tNEWLINE = '\\n',\n\t\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\t\tconst chunkSize = 128;\n\t\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\t\ti = - 1,\n\t\t\t\t\t\tlen = 0,\n\t\t\t\t\t\ts = '',\n\t\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t\twhile ( 0 > ( i = chunk.indexOf( NEWLINE ) ) && len < lineLimit && p < buffer.byteLength ) {\n\n\t\t\t\t\t\ts += chunk;\n\t\t\t\t\t\tlen += chunk.length;\n\t\t\t\t\t\tp += chunkSize;\n\t\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n        \tbyteCode = m.charCodeAt(i);\n        \tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n        \telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n        \tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n        }*/\n\t\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t},\n\n\t\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\t\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\t\theader = {\n\t\t\t\t\t\t\tvalid: 0,\n\n\t\t\t\t\t\t\t/* indicate which fields are valid */\n\t\t\t\t\t\t\tstring: '',\n\n\t\t\t\t\t\t\t/* the actual header string */\n\t\t\t\t\t\t\tcomments: '',\n\n\t\t\t\t\t\t\t/* comments found in header */\n\t\t\t\t\t\t\tprogramtype: 'RGBE',\n\n\t\t\t\t\t\t\t/* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\t\t\t\t\t\t\tformat: '',\n\n\t\t\t\t\t\t\t/* RGBE format, default 32-bit_rle_rgbe */\n\t\t\t\t\t\t\tgamma: 1.0,\n\n\t\t\t\t\t\t\t/* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\t\t\t\t\t\t\texposure: 1.0,\n\n\t\t\t\t\t\t\t/* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\t\t\t\t\t\t\twidth: 0,\n\t\t\t\t\t\t\theight: 0\n\t\t\t\t\t\t\t/* image dimensions, width/height */\n\n\t\t\t\t\t\t};\n\t\t\t\t\tlet line, match;\n\n\t\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t\t}\n\t\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\n\n\t\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\twhile ( true ) {\n\n\t\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\t\theader.format = match[ 1 ]; //'32-bit_rle_rgbe';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS ) break;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn header;\n\n\t\t\t\t},\n\t\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\t\tconst scanline_width = w;\n\n\t\t\t\t\tif ( // run length encoding is not allowed so read flat\n\t\t\t\t\t\tscanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n      2 !== buffer[ 0 ] || 2 !== buffer[ 1 ] || buffer[ 2 ] & 0x80 ) {\n\n\t\t\t\t\t\t// return the flat buffer\n\t\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( scanline_width !== ( buffer[ 2 ] << 8 | buffer[ 3 ] ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet offset = 0,\n\t\t\t\t\t\tpos = 0;\n\t\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\t\tlet num_scanlines = h; // read in each successive scanline\n\n\t\t\t\t\twhile ( num_scanlines > 0 && pos < buffer.byteLength ) {\n\n\t\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\t\tif ( 2 != rgbeStart[ 0 ] || 2 != rgbeStart[ 1 ] || ( rgbeStart[ 2 ] << 8 | rgbeStart[ 3 ] ) != scanline_width ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t\t} // read each of the four channels for the scanline into the buffer\n\t\t\t\t\t\t// first red, then green, then blue, then exponent\n\n\n\t\t\t\t\t\tlet ptr = 0,\n\t\t\t\t\t\t\tcount;\n\n\t\t\t\t\t\twhile ( ptr < ptr_end && pos < buffer.byteLength ) {\n\n\t\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\t\tif ( 0 === count || ptr + count > ptr_end ) {\n\n\t\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\n\t\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t\t} //ptr += count;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\t\tptr += count;\n\t\t\t\t\t\t\t\tpos += count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} // now convert data from buffer into rgba\n\t\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\n\n\t\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\n\t\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\t\toff += scanline_width; //1;\n\n\t\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\t\toff += scanline_width; //1;\n\n\t\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\t\toff += scanline_width; //1;\n\n\t\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn data_rgba;\n\n\t\t\t\t};\n\n\t\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\t\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t\t};\n\n\t\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n\t\t\t\tdestArray[ destOffset + 0 ] = THREE.DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\t\tdestArray[ destOffset + 1 ] = THREE.DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\t\tdestArray[ destOffset + 2 ] = THREE.DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\t\tdestArray[ destOffset + 3 ] = THREE.DataUtils.toHalfFloat( 1 );\n\n\t\t\t};\n\n\t\t\tconst byteArray = new Uint8Array( buffer );\n\t\t\tbyteArray.pos = 0;\n\t\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\t\tconst w = rgbe_header_info.width,\n\t\t\t\t\th = rgbe_header_info.height,\n\t\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\t\tlet data, type;\n\t\t\t\t\tlet numElements;\n\n\t\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\t\tcase THREE.FloatType:\n\t\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdata = floatArray;\n\t\t\t\t\t\t\ttype = THREE.FloatType;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase THREE.HalfFloatType:\n\t\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tdata = halfArray;\n\t\t\t\t\t\t\ttype = THREE.HalfFloatType;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\twidth: w,\n\t\t\t\t\t\theight: h,\n\t\t\t\t\t\tdata: data,\n\t\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\t\ttype: type\n\t\t\t\t\t};\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tsetDataType( value ) {\n\n\t\t\tthis.type = value;\n\t\t\treturn this;\n\n\t\t}\n\n\t\tload( url, onLoad, onProgress, onError ) {\n\n\t\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\t\tswitch ( texture.type ) {\n\n\t\t\t\t\tcase THREE.FloatType:\n\t\t\t\t\tcase THREE.HalfFloatType:\n\t\t\t\t\t\ttexture.encoding = THREE.LinearEncoding;\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\n\t\t\t\t\t\ttexture.magFilter = THREE.LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t\t}\n\n\t\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t\t}\n\n\t}\n\n\tTHREE.RGBELoader = RGBELoader;\n\n} )();\n"],"names":["RGBELoader","THREE","DataTextureLoader","constructor","manager","super","this","type","HalfFloatType","parse","buffer","rgbe_error","rgbe_error_code","msg","console","error","fgets","lineLimit","consume","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","DataUtils","toHalfFloat","min","byteArray","Uint8Array","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","scanline_width","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","count","ptr","isEncodedRun","byteValue","set","l","i1","off","RGBE_ReadPixels_RLE","data","numElements","FloatType","floatArray","Float32Array","j","halfArray","j1","setDataType","value","load","url","onLoad","onProgress","onError","texture","texData","encoding","LinearEncoding","minFilter","LinearFilter","magFilter","generateMipmaps","flipY"],"version":3,"file":"index.e3e600f9.js.map"}