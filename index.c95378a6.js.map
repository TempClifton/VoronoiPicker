{"mappings":"CAAE,WAED,MAAMA,UAAiBC,MAAMC,KAE5BC,YAAaC,EAAOC,EAAQC,EAAOC,GAElCC,QACAC,KAAKH,WAAkBI,IAAVJ,EAAsBA,EAAQ,IAC3CG,KAAKF,YAAoBG,IAAXH,EAAuBA,EAAS,IAC9CE,KAAKE,OAAQ,EACbF,KAAKJ,OAASA,EACdI,KAAKL,MAAQA,EACbK,KAAKG,aAAe,EACpBH,KAAKI,WAAa,GAClBJ,KAAKK,OAAS,GACdL,KAAKM,aAAe,KACpBN,KAAKO,OAAS,EACdP,KAAKQ,YAAc,KACnBR,KAAKS,YAAc,GACnBT,KAAKU,iBAAmB,IAAIC,IAE5BX,KAAKY,uBACLZ,KAAKa,gCAEL,MAAMC,EAAe,IAAItB,MAAMuB,aAC/BD,EAAaE,OAASxB,MAAMyB,mBAC5BH,EAAaI,KAAO1B,MAAM2B,mBAC1BnB,KAAKoB,mBAAqB,IAAI5B,MAAM6B,kBAAmBrB,KAAKH,MAAOG,KAAKF,QAExEE,KAAKsB,mBAAqB,IAAI9B,MAAM6B,kBAAmBrB,KAAKH,MAAOG,KAAKF,OAAQ,CAC/EyB,UAAW/B,MAAMgC,cACjBC,UAAWjC,MAAMgC,cACjBV,aAAcA,IAGfd,KAAK0B,iBAAmB,IAAIlC,MAAM6B,kBAAmBrB,KAAKH,MAAOG,KAAKF,QACtEE,KAAK2B,iBAAmB3B,KAAK0B,iBAAiBE,aAEpB3B,IAArBT,MAAMqC,YAEVC,QAAQC,MAAO,wDAIhB/B,KAAKgC,aAAe,IAAIxC,MAAMyC,eAAgB,CAC7CC,QAASC,OAAOC,OAAQ,GAAI5C,MAAMqC,WAAWK,SAC7CG,SAAU7C,MAAM8C,cAAcV,MAAOpC,MAAMqC,WAAWQ,UACtDE,aAAc/C,MAAMqC,WAAWU,aAC/BC,eAAgBhD,MAAMqC,WAAWW,eACjCC,SAAUjD,MAAMkD,aAEjB1C,KAAKgC,aAAaK,SAAoB,SAAGM,MAAQ3C,KAAKoB,mBAAmBwB,QACzE5C,KAAKgC,aAAaK,SAAmB,QAAGM,MAAQ3C,KAAKsB,mBAAmBsB,QACxE5C,KAAKgC,aAAaK,SAAkB,OAAGM,MAAQ3C,KAAKsB,mBAAmBR,aACvEd,KAAKgC,aAAaK,SAAkB,OAAGM,MAAQ3C,KAAKM,aACpDN,KAAKgC,aAAaK,SAAkB,OAAGM,MAAQ3C,KAAKK,OACpDL,KAAKgC,aAAaK,SAAsB,WAAGM,MAAQ3C,KAAKJ,OAAOiD,KAC/D7C,KAAKgC,aAAaK,SAAqB,UAAGM,MAAQ3C,KAAKJ,OAAOkD,IAC9D9C,KAAKgC,aAAaK,SAAsB,WAAGM,MAAMI,IAAK/C,KAAKH,MAAOG,KAAKF,QACvEE,KAAKgC,aAAaK,SAAkC,uBAAGM,MAAMK,KAAMhD,KAAKJ,OAAOqD,kBAC/EjD,KAAKgC,aAAaK,SAAyC,8BAAGM,MAAMK,KAAMhD,KAAKJ,OAAOsD,yBAEtFlD,KAAKmD,eAAiB,IAAI3D,MAAM4D,mBAChCpD,KAAKmD,eAAeV,SAAWjD,MAAMkD,WAErC1C,KAAKqD,aAAe,IAAI7D,MAAMyC,eAAgB,CAC7CC,QAASC,OAAOC,OAAQ,GAAI5C,MAAM8D,eAAepB,SACjDG,SAAU7C,MAAM8C,cAAcV,MAAOpC,MAAM8D,eAAejB,UAC1DE,aAAc/C,MAAM8D,eAAef,aACnCC,eAAgBhD,MAAM8D,eAAed,iBAEtCxC,KAAKqD,aAAahB,SAAoB,SAAGM,MAAQ3C,KAAK0B,iBAAiBkB,QACvE5C,KAAKqD,aAAahB,SAAsB,WAAGM,MAAMI,IAAK/C,KAAKH,MAAOG,KAAKF,QAEvEE,KAAKuD,oBAAsB,IAAI/D,MAAMyC,eAAgB,CACpDC,QAASC,OAAOC,OAAQ,GAAI5C,MAAMgE,gBAAgBtB,SAClDG,SAAU7C,MAAM8C,cAAcV,MAAOpC,MAAMgE,gBAAgBnB,UAC3DE,aAAc/C,MAAMgE,gBAAgBjB,aACpCC,eAAgBhD,MAAMgE,gBAAgBhB,eACtCC,SAAUjD,MAAMkD,aAEjB1C,KAAKuD,oBAAoBlB,SAAkB,OAAGM,MAAQ3C,KAAKsB,mBAAmBR,aAC9Ed,KAAKuD,oBAAoBlB,SAAsB,WAAGM,MAAQ3C,KAAKJ,OAAOiD,KACtE7C,KAAKuD,oBAAoBlB,SAAqB,UAAGM,MAAQ3C,KAAKJ,OAAOkD,IAErE9C,KAAKyD,aAAe,IAAIjE,MAAMyC,eAAgB,CAC7CI,SAAU7C,MAAM8C,cAAcV,MAAOpC,MAAMkE,WAAWrB,UACtDE,aAAc/C,MAAMkE,WAAWnB,aAC/BC,eAAgBhD,MAAMkE,WAAWlB,eACjCmB,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,SAAUtE,MAAMuE,eAChBC,SAAUxE,MAAMyE,WAChBC,cAAe1E,MAAM2E,YACrBC,cAAe5E,MAAM6E,eACrBC,cAAe9E,MAAMyE,WACrBM,mBAAoB/E,MAAM2E,cAE3BnE,KAAKwE,OAAS,IAAIhF,MAAMiF,eAAgB,MACxCzE,KAAK0E,mBAAqB,IAAIlF,MAAMmF,K,CAIrCC,UAGC5E,KAAKoB,mBAAmBwD,UACxB5E,KAAKsB,mBAAmBsD,UACxB5E,KAAK0B,iBAAiBkD,UACtB5E,KAAK2B,iBAAiBiD,UAEtB5E,KAAKmD,eAAeyB,UACpB5E,KAAKqD,aAAauB,UAClB5E,KAAKyD,aAAamB,UAClB5E,KAAKuD,oBAAoBqB,UAEzB5E,KAAKwE,OAAOI,S,CAIbC,OAAQC,EAAUC,GAqBjB,QAjBwC,IAAnCD,EAASE,aAAaC,WAAqBjF,KAAKM,aAAaU,OAASxB,MAAM0F,iBAEjFJ,EAASK,gBAAiBnF,KAAKoB,oBAC/B0D,EAAS5E,QACT4E,EAASD,OAAQ7E,KAAKL,MAAOK,KAAKJ,QAElCI,KAAKoF,qBACLpF,KAAKqF,eAAgBP,EAAU9E,KAAKmD,eAAgBnD,KAAKsB,mBAAoB,QAAU,GACvFtB,KAAKsF,oBAELtF,KAAKgC,aAAaK,SAAwB,aAAGM,MAAQ3C,KAAKG,aAC1DH,KAAKgC,aAAaK,SAAuB,YAAGM,MAAQ3C,KAAKQ,YACzDR,KAAKgC,aAAaK,SAAuB,YAAGM,MAAQ3C,KAAKS,YACzDT,KAAKuF,WAAYT,EAAU9E,KAAKgC,aAAchC,KAAK0B,kBAEnD1B,KAAKuF,WAAYT,EAAU9E,KAAKqD,aAAcrD,KAAK2B,kBAE1C3B,KAAKO,QAEb,KAAKhB,EAASiG,OAAOC,KACpBzF,KAAKyD,aAAapB,SAAoB,SAAGM,MAAQ3C,KAAK0B,iBAAiBkB,QACvE5C,KAAKyD,aAAahB,SAAWjD,MAAMkD,WACnC1C,KAAKuF,WAAYT,EAAU9E,KAAKyD,aAAczD,KAAK0F,eAAiB,KAAOX,GAC3E,MAED,KAAKxF,EAASiG,OAAOG,KACpB3F,KAAKyD,aAAapB,SAAoB,SAAGM,MAAQ3C,KAAK2B,iBAAiBiB,QACvE5C,KAAKyD,aAAahB,SAAWjD,MAAMkD,WACnC1C,KAAKuF,WAAYT,EAAU9E,KAAKyD,aAAczD,KAAK0F,eAAiB,KAAOX,GAC3E,MAED,KAAKxF,EAASiG,OAAOI,OACpB5F,KAAKyD,aAAapB,SAAoB,SAAGM,MAAQ3C,KAAKoB,mBAAmBwB,QACzE5C,KAAKyD,aAAahB,SAAWjD,MAAMkD,WACnC1C,KAAKuF,WAAYT,EAAU9E,KAAKyD,aAAczD,KAAK0F,eAAiB,KAAOX,GAC3E,MAED,KAAKxF,EAASiG,OAAOK,MACpB7F,KAAKuF,WAAYT,EAAU9E,KAAKuD,oBAAqBvD,KAAK0F,eAAiB,KAAOX,GAClF,MAED,KAAKxF,EAASiG,OAAOM,OACpB9F,KAAKyD,aAAapB,SAAoB,SAAGM,MAAQ3C,KAAKsB,mBAAmBsB,QACzE5C,KAAKyD,aAAahB,SAAWjD,MAAMkD,WACnC1C,KAAKuF,WAAYT,EAAU9E,KAAKyD,aAAczD,KAAK0F,eAAiB,KAAOX,GAC3E,MAED,KAAKxF,EAASiG,OAAOO,QACpB/F,KAAKyD,aAAapB,SAAoB,SAAGM,MAAQ3C,KAAKoB,mBAAmBwB,QACzE5C,KAAKyD,aAAahB,SAAWjD,MAAMkD,WACnC1C,KAAKuF,WAAYT,EAAU9E,KAAKyD,aAAczD,KAAK0F,eAAiB,KAAOX,GAC3E/E,KAAKyD,aAAapB,SAAoB,SAAGM,MAAQ3C,KAAK2B,iBAAiBiB,QACvE5C,KAAKyD,aAAahB,SAAWjD,MAAMwG,eACnChG,KAAKuF,WAAYT,EAAU9E,KAAKyD,aAAczD,KAAK0F,eAAiB,KAAOX,GAC3E,MAED,QACCjD,QAAQmE,KAAM,wC,CAMjBV,WAAYT,EAAUoB,EAAcC,EAAcC,EAAYC,GAG7DvB,EAASwB,cAAetG,KAAK0E,oBAC7B,MAAM6B,EAAqBzB,EAAS0B,gBAC9BC,EAAoB3B,EAAS4B,UACnC5B,EAASK,gBAAiBgB,GAE1BrB,EAAS4B,WAAY,EAEhBN,UAEJtB,EAAS6B,cAAeP,GACxBtB,EAAS8B,cAAeP,GAAc,GACtCvB,EAAS5E,SAIVF,KAAKwE,OAAOqC,SAAWX,EACvBlG,KAAKwE,OAAOK,OAAQC,GAEpBA,EAAS4B,UAAYD,EACrB3B,EAAS6B,cAAe3G,KAAK0E,oBAC7BI,EAAS8B,cAAeL,E,CAIzBlB,eAAgBP,EAAUgC,EAAkBX,EAAcC,EAAYC,GAErEvB,EAASwB,cAAetG,KAAK0E,oBAC7B,MAAM6B,EAAqBzB,EAAS0B,gBAC9BC,EAAoB3B,EAAS4B,UACnC5B,EAASK,gBAAiBgB,GAC1BrB,EAAS4B,WAAY,EACrBN,EAAaU,EAAiBV,YAAcA,EAC5CC,EAAaS,EAAiBT,YAAcA,EAEvCD,UAEJtB,EAAS6B,cAAeP,GACxBtB,EAAS8B,cAAeP,GAAc,GACtCvB,EAAS5E,SAIVF,KAAKL,MAAMmH,iBAAmBA,EAC9BhC,EAASD,OAAQ7E,KAAKL,MAAOK,KAAKJ,QAClCI,KAAKL,MAAMmH,iBAAmB,KAE9BhC,EAAS4B,UAAYD,EACrB3B,EAAS6B,cAAe3G,KAAK0E,oBAC7BI,EAAS8B,cAAeL,E,CAIzBQ,QAASlH,EAAOC,GAEfE,KAAKH,MAAQA,EACbG,KAAKF,OAASA,EACdE,KAAKoB,mBAAmB2F,QAASlH,EAAOC,GACxCE,KAAK0B,iBAAiBqF,QAASlH,EAAOC,GACtCE,KAAKsB,mBAAmByF,QAASlH,EAAOC,GACxCE,KAAK2B,iBAAiBoF,QAASlH,EAAOC,GACtCE,KAAKgC,aAAaK,SAAsB,WAAGM,MAAMI,IAAKlD,EAAOC,GAC7DE,KAAKgC,aAAaK,SAAkC,uBAAGM,MAAMK,KAAMhD,KAAKJ,OAAOqD,kBAC/EjD,KAAKgC,aAAaK,SAAyC,8BAAGM,MAAMK,KAAMhD,KAAKJ,OAAOsD,yBACtFlD,KAAKqD,aAAahB,SAAsB,WAAGM,MAAMI,IAAKlD,EAAOC,E,CAI9Dc,uBAEC,MAAMR,EAAaJ,KAAKI,WAClBC,EAASL,KAAKK,OAEpB,IAAM,IAAI2G,EAAI,EAAGA,EAAI5G,EAAY4G,IAAO,CAEvC,MAAMC,EAAS,IAAIzH,MAAM0H,QACzBD,EAAOE,EAAoB,EAAhBC,KAAKC,SAAe,EAC/BJ,EAAOK,EAAoB,EAAhBF,KAAKC,SAAe,EAC/BJ,EAAOM,EAAIH,KAAKC,SAChBJ,EAAOO,YACP,IAAIC,EAAQT,EAAI5G,EAChBqH,EAAQjI,MAAMkI,UAAUC,KAAM,GAAK,EAAGF,EAAQA,GAC9CR,EAAOW,eAAgBH,GACvBpH,EAAOwH,KAAMZ,E,EAMfpG,qCAK6BZ,IAAvBT,MAAMsI,cAEVhG,QAAQC,MAAO,0DAIhB,MAAMgG,EAAU,IAAIvI,MAAMsI,aAEpBE,EAAO,IAAIC,aADJpI,IAGb,IAAM,IAAImH,EAAI,EAAGA,EAHJnH,GAGcmH,IAAO,CAEjC,MAAMG,EAAoB,EAAhBC,KAAKC,SAAe,EACxBC,EAAoB,EAAhBF,KAAKC,SAAe,EACxBE,EAAI,EACVS,EAAMhB,GAAMe,EAAQG,QAASf,EAAGG,EAAGC,E,CAIpCvH,KAAKM,aAAe,IAAId,MAAM2I,YAAaH,EAtB7B,EACJ,EAqBsDxI,MAAM4I,UAAW5I,MAAM6I,WACvFrI,KAAKM,aAAagI,MAAQ9I,MAAM+I,eAChCvI,KAAKM,aAAakI,MAAQhJ,MAAM+I,eAChCvI,KAAKM,aAAamI,aAAc,C,CAIjCrD,qBAEC,MAAMzF,EAAQK,KAAKL,MACb+I,EAAQ1I,KAAKU,iBACnBf,EAAMgJ,UAAU,SAAWC,GAE1BF,EAAM3F,IAAK6F,EAAQA,EAAOC,UACrBD,EAAOE,UAAYF,EAAOG,UAASH,EAAOC,SAAU,E,IAM3DvD,oBAEC,MAAM3F,EAAQK,KAAKL,MACb+I,EAAQ1I,KAAKU,iBACnBf,EAAMgJ,UAAU,SAAWC,GAE1B,MAAMC,EAAUH,EAAMM,IAAKJ,GAC3BA,EAAOC,QAAUA,C,IAGlBH,EAAMxI,O,EAMRX,EAASiG,OAAS,CACjBO,QAAW,EACXN,KAAQ,EACRE,KAAQ,EACRC,OAAU,EACVC,MAAS,EACTC,OAAU,GAGXtG,MAAMD,SAAWA,CAEjB,CA9VC","sources":["../js/vendor/Three.js/r145/examples_js/postprocessing/SSAOPass.js"],"sourcesContent":["( function () {\n\n\tclass SSAOPass extends THREE.Pass {\n\n\t\tconstructor( scene, camera, width, height ) {\n\n\t\t\tsuper();\n\t\t\tthis.width = width !== undefined ? width : 512;\n\t\t\tthis.height = height !== undefined ? height : 512;\n\t\t\tthis.clear = true;\n\t\t\tthis.camera = camera;\n\t\t\tthis.scene = scene;\n\t\t\tthis.kernelRadius = 8;\n\t\t\tthis.kernelSize = 32;\n\t\t\tthis.kernel = [];\n\t\t\tthis.noiseTexture = null;\n\t\t\tthis.output = 0;\n\t\t\tthis.minDistance = 0.005;\n\t\t\tthis.maxDistance = 0.1;\n\t\t\tthis._visibilityCache = new Map(); //\n\n\t\t\tthis.generateSampleKernel();\n\t\t\tthis.generateRandomKernelRotations(); // beauty render target\n\n\t\t\tconst depthTexture = new THREE.DepthTexture();\n\t\t\tdepthTexture.format = THREE.DepthStencilFormat;\n\t\t\tdepthTexture.type = THREE.UnsignedInt248Type;\n\t\t\tthis.beautyRenderTarget = new THREE.WebGLRenderTarget( this.width, this.height ); // normal render target with depth buffer\n\n\t\t\tthis.normalRenderTarget = new THREE.WebGLRenderTarget( this.width, this.height, {\n\t\t\t\tminFilter: THREE.NearestFilter,\n\t\t\t\tmagFilter: THREE.NearestFilter,\n\t\t\t\tdepthTexture: depthTexture\n\t\t\t} ); // ssao render target\n\n\t\t\tthis.ssaoRenderTarget = new THREE.WebGLRenderTarget( this.width, this.height );\n\t\t\tthis.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\n\n\t\t\tif ( THREE.SSAOShader === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.SSAOPass: The pass relies on THREE.SSAOShader.' );\n\n\t\t\t}\n\n\t\t\tthis.ssaoMaterial = new THREE.ShaderMaterial( {\n\t\t\t\tdefines: Object.assign( {}, THREE.SSAOShader.defines ),\n\t\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.SSAOShader.uniforms ),\n\t\t\t\tvertexShader: THREE.SSAOShader.vertexShader,\n\t\t\t\tfragmentShader: THREE.SSAOShader.fragmentShader,\n\t\t\t\tblending: THREE.NoBlending\n\t\t\t} );\n\t\t\tthis.ssaoMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\tthis.ssaoMaterial.uniforms[ 'tNormal' ].value = this.normalRenderTarget.texture;\n\t\t\tthis.ssaoMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\n\t\t\tthis.ssaoMaterial.uniforms[ 'tNoise' ].value = this.noiseTexture;\n\t\t\tthis.ssaoMaterial.uniforms[ 'kernel' ].value = this.kernel;\n\t\t\tthis.ssaoMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\t\tthis.ssaoMaterial.uniforms[ 'cameraFar' ].value = this.camera.far;\n\t\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height );\n\t\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse ); // normal material\n\n\t\t\tthis.normalMaterial = new THREE.MeshNormalMaterial();\n\t\t\tthis.normalMaterial.blending = THREE.NoBlending; // blur material\n\n\t\t\tthis.blurMaterial = new THREE.ShaderMaterial( {\n\t\t\t\tdefines: Object.assign( {}, THREE.SSAOBlurShader.defines ),\n\t\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.SSAOBlurShader.uniforms ),\n\t\t\t\tvertexShader: THREE.SSAOBlurShader.vertexShader,\n\t\t\t\tfragmentShader: THREE.SSAOBlurShader.fragmentShader\n\t\t\t} );\n\t\t\tthis.blurMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( this.width, this.height ); // material for rendering the depth\n\n\t\t\tthis.depthRenderMaterial = new THREE.ShaderMaterial( {\n\t\t\t\tdefines: Object.assign( {}, THREE.SSAODepthShader.defines ),\n\t\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.SSAODepthShader.uniforms ),\n\t\t\t\tvertexShader: THREE.SSAODepthShader.vertexShader,\n\t\t\t\tfragmentShader: THREE.SSAODepthShader.fragmentShader,\n\t\t\t\tblending: THREE.NoBlending\n\t\t\t} );\n\t\t\tthis.depthRenderMaterial.uniforms[ 'tDepth' ].value = this.normalRenderTarget.depthTexture;\n\t\t\tthis.depthRenderMaterial.uniforms[ 'cameraNear' ].value = this.camera.near;\n\t\t\tthis.depthRenderMaterial.uniforms[ 'cameraFar' ].value = this.camera.far; // material for rendering the content of a render target\n\n\t\t\tthis.copyMaterial = new THREE.ShaderMaterial( {\n\t\t\t\tuniforms: THREE.UniformsUtils.clone( THREE.CopyShader.uniforms ),\n\t\t\t\tvertexShader: THREE.CopyShader.vertexShader,\n\t\t\t\tfragmentShader: THREE.CopyShader.fragmentShader,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\tblendSrc: THREE.DstColorFactor,\n\t\t\t\tblendDst: THREE.ZeroFactor,\n\t\t\t\tblendEquation: THREE.AddEquation,\n\t\t\t\tblendSrcAlpha: THREE.DstAlphaFactor,\n\t\t\t\tblendDstAlpha: THREE.ZeroFactor,\n\t\t\t\tblendEquationAlpha: THREE.AddEquation\n\t\t\t} );\n\t\t\tthis.fsQuad = new THREE.FullScreenQuad( null );\n\t\t\tthis.originalClearColor = new THREE.Color();\n\n\t\t}\n\n\t\tdispose() {\n\n\t\t\t// dispose render targets\n\t\t\tthis.beautyRenderTarget.dispose();\n\t\t\tthis.normalRenderTarget.dispose();\n\t\t\tthis.ssaoRenderTarget.dispose();\n\t\t\tthis.blurRenderTarget.dispose(); // dispose materials\n\n\t\t\tthis.normalMaterial.dispose();\n\t\t\tthis.blurMaterial.dispose();\n\t\t\tthis.copyMaterial.dispose();\n\t\t\tthis.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n\t\t\tthis.fsQuad.dispose();\n\n\t\t}\n\n\t\trender( renderer, writeBuffer\n\t\t\t/*, readBuffer, deltaTime, maskActive */\n\t\t) {\n\n\t\t\tif ( renderer.capabilities.isWebGL2 === false ) this.noiseTexture.format = THREE.LuminanceFormat; // render beauty\n\n\t\t\trenderer.setRenderTarget( this.beautyRenderTarget );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.scene, this.camera ); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n\t\t\tthis.overrideVisibility();\n\t\t\tthis.renderOverride( renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0 );\n\t\t\tthis.restoreVisibility(); // render SSAO\n\n\t\t\tthis.ssaoMaterial.uniforms[ 'kernelRadius' ].value = this.kernelRadius;\n\t\t\tthis.ssaoMaterial.uniforms[ 'minDistance' ].value = this.minDistance;\n\t\t\tthis.ssaoMaterial.uniforms[ 'maxDistance' ].value = this.maxDistance;\n\t\t\tthis.renderPass( renderer, this.ssaoMaterial, this.ssaoRenderTarget ); // render blur\n\n\t\t\tthis.renderPass( renderer, this.blurMaterial, this.blurRenderTarget ); // output result to screen\n\n\t\t\tswitch ( this.output ) {\n\n\t\t\t\tcase SSAOPass.OUTPUT.SSAO:\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.ssaoRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SSAOPass.OUTPUT.Blur:\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SSAOPass.OUTPUT.Beauty:\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SSAOPass.OUTPUT.Depth:\n\t\t\t\t\tthis.renderPass( renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SSAOPass.OUTPUT.Normal:\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.normalRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase SSAOPass.OUTPUT.Default:\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.beautyRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.NoBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\t\t\t\t\tthis.copyMaterial.uniforms[ 'tDiffuse' ].value = this.blurRenderTarget.texture;\n\t\t\t\t\tthis.copyMaterial.blending = THREE.CustomBlending;\n\t\t\t\t\tthis.renderPass( renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.SSAOPass: Unknown output type.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\trenderPass( renderer, passMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t\t// save original state\n\t\t\trenderer.getClearColor( this.originalClearColor );\n\t\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\t\tconst originalAutoClear = renderer.autoClear;\n\t\t\trenderer.setRenderTarget( renderTarget ); // setup pass state\n\n\t\t\trenderer.autoClear = false;\n\n\t\t\tif ( clearColor !== undefined && clearColor !== null ) {\n\n\t\t\t\trenderer.setClearColor( clearColor );\n\t\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\t\trenderer.clear();\n\n\t\t\t}\n\n\t\t\tthis.fsQuad.material = passMaterial;\n\t\t\tthis.fsQuad.render( renderer ); // restore original state\n\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t\trenderer.setClearColor( this.originalClearColor );\n\t\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t\t}\n\n\t\trenderOverride( renderer, overrideMaterial, renderTarget, clearColor, clearAlpha ) {\n\n\t\t\trenderer.getClearColor( this.originalClearColor );\n\t\t\tconst originalClearAlpha = renderer.getClearAlpha();\n\t\t\tconst originalAutoClear = renderer.autoClear;\n\t\t\trenderer.setRenderTarget( renderTarget );\n\t\t\trenderer.autoClear = false;\n\t\t\tclearColor = overrideMaterial.clearColor || clearColor;\n\t\t\tclearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n\t\t\tif ( clearColor !== undefined && clearColor !== null ) {\n\n\t\t\t\trenderer.setClearColor( clearColor );\n\t\t\t\trenderer.setClearAlpha( clearAlpha || 0.0 );\n\t\t\t\trenderer.clear();\n\n\t\t\t}\n\n\t\t\tthis.scene.overrideMaterial = overrideMaterial;\n\t\t\trenderer.render( this.scene, this.camera );\n\t\t\tthis.scene.overrideMaterial = null; // restore original state\n\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t\trenderer.setClearColor( this.originalClearColor );\n\t\t\trenderer.setClearAlpha( originalClearAlpha );\n\n\t\t}\n\n\t\tsetSize( width, height ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.beautyRenderTarget.setSize( width, height );\n\t\t\tthis.ssaoRenderTarget.setSize( width, height );\n\t\t\tthis.normalRenderTarget.setSize( width, height );\n\t\t\tthis.blurRenderTarget.setSize( width, height );\n\t\t\tthis.ssaoMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\t\t\tthis.ssaoMaterial.uniforms[ 'cameraProjectionMatrix' ].value.copy( this.camera.projectionMatrix );\n\t\t\tthis.ssaoMaterial.uniforms[ 'cameraInverseProjectionMatrix' ].value.copy( this.camera.projectionMatrixInverse );\n\t\t\tthis.blurMaterial.uniforms[ 'resolution' ].value.set( width, height );\n\n\t\t}\n\n\t\tgenerateSampleKernel() {\n\n\t\t\tconst kernelSize = this.kernelSize;\n\t\t\tconst kernel = this.kernel;\n\n\t\t\tfor ( let i = 0; i < kernelSize; i ++ ) {\n\n\t\t\t\tconst sample = new THREE.Vector3();\n\t\t\t\tsample.x = Math.random() * 2 - 1;\n\t\t\t\tsample.y = Math.random() * 2 - 1;\n\t\t\t\tsample.z = Math.random();\n\t\t\t\tsample.normalize();\n\t\t\t\tlet scale = i / kernelSize;\n\t\t\t\tscale = THREE.MathUtils.lerp( 0.1, 1, scale * scale );\n\t\t\t\tsample.multiplyScalar( scale );\n\t\t\t\tkernel.push( sample );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgenerateRandomKernelRotations() {\n\n\t\t\tconst width = 4,\n\t\t\t\theight = 4;\n\n\t\t\tif ( THREE.SimplexNoise === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.SSAOPass: The pass relies on THREE.SimplexNoise.' );\n\n\t\t\t}\n\n\t\t\tconst simplex = new THREE.SimplexNoise();\n\t\t\tconst size = width * height;\n\t\t\tconst data = new Float32Array( size );\n\n\t\t\tfor ( let i = 0; i < size; i ++ ) {\n\n\t\t\t\tconst x = Math.random() * 2 - 1;\n\t\t\t\tconst y = Math.random() * 2 - 1;\n\t\t\t\tconst z = 0;\n\t\t\t\tdata[ i ] = simplex.noise3d( x, y, z );\n\n\t\t\t}\n\n\t\t\tthis.noiseTexture = new THREE.DataTexture( data, width, height, THREE.RedFormat, THREE.FloatType );\n\t\t\tthis.noiseTexture.wrapS = THREE.RepeatWrapping;\n\t\t\tthis.noiseTexture.wrapT = THREE.RepeatWrapping;\n\t\t\tthis.noiseTexture.needsUpdate = true;\n\n\t\t}\n\n\t\toverrideVisibility() {\n\n\t\t\tconst scene = this.scene;\n\t\t\tconst cache = this._visibilityCache;\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tcache.set( object, object.visible );\n\t\t\t\tif ( object.isPoints || object.isLine ) object.visible = false;\n\n\t\t\t} );\n\n\t\t}\n\n\t\trestoreVisibility() {\n\n\t\t\tconst scene = this.scene;\n\t\t\tconst cache = this._visibilityCache;\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tconst visible = cache.get( object );\n\t\t\t\tobject.visible = visible;\n\n\t\t\t} );\n\t\t\tcache.clear();\n\n\t\t}\n\n\t}\n\n\tSSAOPass.OUTPUT = {\n\t\t'Default': 0,\n\t\t'SSAO': 1,\n\t\t'Blur': 2,\n\t\t'Beauty': 3,\n\t\t'Depth': 4,\n\t\t'Normal': 5\n\t};\n\n\tTHREE.SSAOPass = SSAOPass;\n\n} )();\n"],"names":["SSAOPass","THREE","Pass","constructor","scene","camera","width","height","super","this","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","DepthTexture","format","DepthStencilFormat","type","UnsignedInt248Type","beautyRenderTarget","WebGLRenderTarget","normalRenderTarget","minFilter","NearestFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","SSAOShader","console","error","ssaoMaterial","ShaderMaterial","defines","Object","assign","uniforms","UniformsUtils","vertexShader","fragmentShader","blending","NoBlending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","MeshNormalMaterial","blurMaterial","SSAOBlurShader","depthRenderMaterial","SSAODepthShader","copyMaterial","CopyShader","transparent","depthTest","depthWrite","blendSrc","DstColorFactor","blendDst","ZeroFactor","blendEquation","AddEquation","blendSrcAlpha","DstAlphaFactor","blendDstAlpha","blendEquationAlpha","fsQuad","FullScreenQuad","originalClearColor","Color","dispose","render","renderer","writeBuffer","capabilities","isWebGL2","LuminanceFormat","setRenderTarget","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","CustomBlending","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","Vector3","x","Math","random","y","z","normalize","scale","MathUtils","lerp","multiplyScalar","push","SimplexNoise","simplex","data","Float32Array","noise3d","DataTexture","RedFormat","FloatType","wrapS","RepeatWrapping","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get"],"version":3,"file":"index.c95378a6.js.map"}